/**
 * usePSLogger Hook
 *
 * ÂäüËÉΩÔºöPSÂä©ÁêÜÊó•ÂøóËÆ∞ÂΩïÈí©Â≠êÔºåÁî®‰∫éËÆ∞ÂΩï‰∏™‰∫∫ÈôàËø∞Âä©ÁêÜÁöÑ‰ΩøÁî®ÁªìÊûúÂà∞Êï∞ÊçÆÂ∫ì
 *
 * Ê†∏ÂøÉÁâπÊÄßÔºö
 * 1. ÁªìÊûúËÆ∞ÂΩïÔºö
 *    - ËÆ∞ÂΩïÊä•ÂëäÂàÜÊûêÁªìÊûú
 *    - ËÆ∞ÂΩïÂàùÁ®øÁîüÊàêÁªìÊûú
 *    - ËÆ∞ÂΩïÂÆåÊï¥ÊµÅÁ®ãÁªìÊûú
 *    - ÊîØÊåÅÊàêÂäüÂíåÂ§±Ë¥•Áä∂ÊÄÅ
 *
 * 2. Êï∞ÊçÆÁªìÊûÑÔºö
 *    - ËØ∑Ê±ÇÂÖÉÊï∞ÊçÆËÆ∞ÂΩï
 *    - ÁªìÊûúÊï∞ÊçÆÂ≠òÂÇ®
 *    - ÊÄßËÉΩÊåáÊ†áËøΩË∏™
 *    - ÈîôËØØ‰ø°ÊÅØËÆ∞ÂΩï
 *
 * 3. Âú∫ÊôØÊîØÊåÅÔºö
 *    - Êä•ÂëäÂàÜÊûêÊó•Âøó
 *    - ÂàùÁ®øÁîüÊàêÊó•Âøó
 *    - ÈîôËØØÂ§ÑÁêÜÊó•Âøó
 *    - ÊÄßËÉΩÁõëÊéßÊó•Âøó
 *
 * 4. ÂÆâÂÖ®ÊÄßÔºö
 *    - Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅÊ£ÄÊü•
 *    - Êï∞ÊçÆËÑ±ÊïèÂ§ÑÁêÜ
 *    - ÈîôËØØ‰ºòÈõÖÂ§ÑÁêÜ
 *    - ‰∏çÂΩ±Âìç‰∏ªÂäüËÉΩ
 *
 * @author EssayMaker Team
 * @version 1.0.0
 */

"use client";

import { useSession } from "next-auth/react";
import { DisplayResult } from "../../../types";

// =================================================================
// üîß ÂºÄÂèëÊ®°ÂºèÂºÄÂÖ≥ - ÈÄöËøáÊ≥®ÈáäÊéßÂà∂ËÆ§ËØÅ
// =================================================================
// Ê≥®Èáä‰∏ãÈù¢ËøôË°å = ÂÖ≥Èó≠ËÆ§ËØÅÔºàÊú¨Âú∞ÂºÄÂèëÊ®°ÂºèÔºâ
// ÂèñÊ∂àÊ≥®Èáä = ÂºÄÂêØËÆ§ËØÅÔºàÁîü‰∫ßÊ®°ÂºèÔºâ
const ENABLE_AUTH_CHECK = true;
// =================================================================

export function usePSLogger() {
  const { data: session } = useSession();

  // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÁöÑÈÄöÁî®ÊñπÊ≥ï
  const getUserInfo = () => {
    if (ENABLE_AUTH_CHECK && session?.user) {
      return {
        email: session.user.email,
        name: session.user.name || "Êú™Áü•",
        unitName: (session.user as any)?.unitName || "Êú™Áü•",
      };
    } else {
      return {
        email: "dev@local.test",
        name: "ÂºÄÂèëËÄÖ",
        unitName: "Êú¨Âú∞ÂºÄÂèë",
      };
    }
  };

  // Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•ËÆ∞ÂΩïÊó•Âøó
  const canLog = () => {
    if (ENABLE_AUTH_CHECK) {
      return !!session?.user?.email;
    }
    return true; // ÂºÄÂèëÊ®°ÂºèÊÄªÊòØÂÖÅËÆ∏ËÆ∞ÂΩï
  };

  // ËÆ∞ÂΩïÊä•ÂëäÁªìÊûú
  const logReportResult = async (
    requestData: any,
    resultData: DisplayResult | null,
    isSuccess: boolean,
    duration: number,
    errorMessage?: string
  ) => {
    // üîß ËÆ§ËØÅÊ£ÄÊü• - ÂèØÈÄöËøáÈ°∂ÈÉ®ÂºÄÂÖ≥ÊéßÂà∂
    if (!canLog()) {
      // console.log("[PSLogger] Áî®Êà∑Êú™ÁôªÂΩïÔºåË∑≥ËøáÊó•ÂøóËÆ∞ÂΩï");
      return;
    }

    const userInfo = getUserInfo();
    // console.log("[PSLogger] ÂºÄÂßãËÆ∞ÂΩïÊä•ÂëäÊó•Âøó:", {
    //   isSuccess,
    //   duration,
    //   userEmail: userInfo.email,
    //   mode: ENABLE_AUTH_CHECK ? "Áîü‰∫ßÊ®°Âºè" : "ÂºÄÂèëÊ®°Âºè",
    // });
    // ÊûÑÂª∫Êñá‰ª∂ÂêçÂàóË°®
    const fileNames = [];
    if (requestData.files && requestData.files.length > 0) {
      fileNames.push(...requestData.files.map((f: any) => f.name || "Unknown"));
    }
    if (requestData.transcriptFiles && requestData.transcriptFiles.length > 0) {
      fileNames.push(
        ...requestData.transcriptFiles.map((f: any) => f.name || "Unknown")
      );
    }
    const fileContent = fileNames.length > 0 ? fileNames.join(", ") : "Êú™‰∏ä‰º†";

    try {
      const response = await fetch("/api/essaymaker/llm-logs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          assistantType: "PS_ASSISTANT",
          endpoint: "/api/essaymaker/ps-report",
          requestMetadata: {
            type: "analysis",
            fileContent: fileContent,
            files: requestData.files || [],
            transcriptFiles: requestData.transcriptFiles || [],
            query: requestData.query || "",
            customPrompt: requestData.query || "",
            operation: "report_generation",
            timestamp: new Date().toISOString(),
          },
          resultData: {
            content: resultData?.content || "",
            currentStep: resultData?.currentStep || "",
            error: !isSuccess,
          },
          isSuccess: isSuccess,
          duration: duration,
          errorMessage: errorMessage || null,
          name: userInfo.name,
          unitName: userInfo.unitName,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        // console.log("[PSLogger] Êä•ÂëäÊó•ÂøóËÆ∞ÂΩïÊàêÂäü:", result.resultId);
      } else {
        const errorText = await response.text();
        // // console.error(
        //   "[PSLogger] Êä•ÂëäÊó•ÂøóËÆ∞ÂΩïÂ§±Ë¥•:",
        //   response.status,
        //   errorText
        // );
      }
    } catch (error) {
      // console.error("[PSLogger] Êä•ÂëäÊó•ÂøóËÆ∞ÂΩïÂºÇÂ∏∏:", error);
    }
  };

  // ËÆ∞ÂΩïÂàùÁ®øÁªìÊûú
  const logDraftResult = async (
    requestData: any,
    resultData: DisplayResult | null,
    isSuccess: boolean,
    duration: number,
    errorMessage?: string
  ) => {
    // üîß ËÆ§ËØÅÊ£ÄÊü• - ÂèØÈÄöËøáÈ°∂ÈÉ®ÂºÄÂÖ≥ÊéßÂà∂
    if (!canLog()) {
      // console.log("[PSLogger] Áî®Êà∑Êú™ÁôªÂΩïÔºåË∑≥ËøáÊó•ÂøóËÆ∞ÂΩï");
      return;
    }

    const userInfo = getUserInfo();
    // console.log("[PSLogger] ÂºÄÂßãËÆ∞ÂΩïÂàùÁ®øÊó•Âøó:", {
    //   isSuccess,
    //   duration,
    //   userEmail: userInfo.email,
    //   mode: ENABLE_AUTH_CHECK ? "Áîü‰∫ßÊ®°Âºè" : "ÂºÄÂèëÊ®°Âºè",
    // });
    // ÂØπ‰∫éÂàùÁ®øÁîüÊàêÔºåÂ¶ÇÊûúÊúâpurifiedContentËØ¥ÊòéÂ∑≤Â§ÑÁêÜÊñá‰ª∂ÂÜÖÂÆπ
    const fileContent =
      requestData.purifiedContent && requestData.purifiedContent.length > 0
        ? "Â∑≤Â§ÑÁêÜÊñá‰ª∂ÂÜÖÂÆπ"
        : "Êú™‰∏ä‰º†";

    try {
      const response = await fetch("/api/essaymaker/llm-logs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          assistantType: "PS_ASSISTANT",
          endpoint: "/api/essaymaker/ps-draft",
          requestMetadata: {
            type: "analysis",
            fileContent: fileContent,
            purifiedContent: requestData.purifiedContent || "",
            direction: requestData.direction || "",
            requirements: requestData.requirements || "",
            transcriptAnalysis: requestData.transcriptAnalysis || "",
            customPrompt: `${requestData.direction || ""}${
              requestData.requirements ? ` - ${requestData.requirements}` : ""
            }`,
            operation: "draft_generation",
            timestamp: new Date().toISOString(),
          },
          resultData: {
            content: resultData?.content || "",
            currentStep: resultData?.currentStep || "",
            error: !isSuccess,
          },
          isSuccess: isSuccess,
          duration: duration,
          errorMessage: errorMessage || null,
          name: userInfo.name,
          unitName: userInfo.unitName,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        // console.log("[PSLogger] ÂàùÁ®øÊó•ÂøóËÆ∞ÂΩïÊàêÂäü:", result.resultId);
      } else {
        const errorText = await response.text();
        // console.error(
        //   "[PSLogger] ÂàùÁ®øÊó•ÂøóËÆ∞ÂΩïÂ§±Ë¥•:",
        //   response.status,
        //   errorText
        // );
      }
    } catch (error) {
      // console.error("[PSLogger] ÂàùÁ®øÊó•ÂøóËÆ∞ÂΩïÂºÇÂ∏∏:", error);
    }
  };

  // ËÆ∞ÂΩïÂÆåÊï¥ÁªìÊûúÔºàÂåÖÂê´Êä•ÂëäÂíåÂàùÁ®øÔºâ
  const logCompleteResult = async (
    requestData: any,
    reportResult: DisplayResult | null,
    draftResult: DisplayResult | null,
    isSuccess: boolean,
    duration: number,
    errorMessage?: string
  ) => {
    // üîß ËÆ§ËØÅÊ£ÄÊü• - ÂèØÈÄöËøáÈ°∂ÈÉ®ÂºÄÂÖ≥ÊéßÂà∂
    if (!canLog()) {
      // console.log("[PSLogger] Áî®Êà∑Êú™ÁôªÂΩïÔºåË∑≥ËøáÊó•ÂøóËÆ∞ÂΩï");
      return;
    }

    const userInfo = getUserInfo();
    // console.log("[PSLogger] ÂºÄÂßãËÆ∞ÂΩïÂÆåÊï¥Êó•Âøó:", {
    //   isSuccess,
    //   duration,
    //   userEmail: userInfo.email,
    //   mode: ENABLE_AUTH_CHECK ? "Áîü‰∫ßÊ®°Âºè" : "ÂºÄÂèëÊ®°Âºè",
    // });
    // ÊûÑÂª∫Êñá‰ª∂ÂêçÂàóË°®ÔºàÂèØËÉΩÂåÖÂê´Â§öÁßçÊù•Ê∫êÁöÑÊñá‰ª∂‰ø°ÊÅØÔºâ
    const fileNames = [];
    if (requestData.files && requestData.files.length > 0) {
      fileNames.push(...requestData.files.map((f: any) => f.name || "Unknown"));
    }
    if (requestData.transcriptFiles && requestData.transcriptFiles.length > 0) {
      fileNames.push(
        ...requestData.transcriptFiles.map((f: any) => f.name || "Unknown")
      );
    }
    let fileContent = fileNames.length > 0 ? fileNames.join(", ") : "";

    // Â¶ÇÊûúÊ≤°ÊúâÊñá‰ª∂‰ΩÜÊúâpurifiedContentÔºåËØ¥ÊòéÊòØÂ§ÑÁêÜËøáÁöÑÂÜÖÂÆπ
    if (
      !fileContent &&
      requestData.purifiedContent &&
      requestData.purifiedContent.length > 0
    ) {
      fileContent = "Â∑≤Â§ÑÁêÜÊñá‰ª∂ÂÜÖÂÆπ";
    }

    if (!fileContent) {
      fileContent = "Êú™‰∏ä‰º†";
    }

    try {
      const response = await fetch("/api/essaymaker/llm-logs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          assistantType: "PS_ASSISTANT",
          endpoint: "/api/essaymaker/ps-complete",
          requestMetadata: {
            type: "analysis",
            fileContent: fileContent,
            files: requestData.files || [],
            transcriptFiles: requestData.transcriptFiles || [],
            purifiedContent: requestData.purifiedContent || "",
            direction: requestData.direction || "",
            requirements: requestData.requirements || "",
            transcriptAnalysis: requestData.transcriptAnalysis || "",
            query: requestData.query || "",
            customPrompt:
              requestData.query ||
              `${requestData.direction || ""}${
                requestData.requirements ? ` - ${requestData.requirements}` : ""
              }`,
            operation: "complete_generation",
            timestamp: new Date().toISOString(),
          },
          resultData: {
            reportContent: reportResult?.content || "",
            draftContent: draftResult?.content || "",
            reportCurrentStep: reportResult?.currentStep || "",
            draftCurrentStep: draftResult?.currentStep || "",
            error: !isSuccess,
          },
          isSuccess: isSuccess,
          duration: duration,
          errorMessage: errorMessage || null,
          name: userInfo.name,
          unitName: userInfo.unitName,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        // console.log("[PSLogger] ÂÆåÊï¥Êó•ÂøóËÆ∞ÂΩïÊàêÂäü:", result.resultId);
      } else {
        const errorText = await response.text();
        // console.error(
        //   "[PSLogger] ÂÆåÊï¥Êó•ÂøóËÆ∞ÂΩïÂ§±Ë¥•:",
        //   response.status,
        //   errorText
        // );
      }
    } catch (error) {
      // console.error("[PSLogger] ÂÆåÊï¥Êó•ÂøóËÆ∞ÂΩïÂºÇÂ∏∏:", error);
    }
  };

  return {
    logReportResult,
    logDraftResult,
    logCompleteResult,
  };
}
